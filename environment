# -*- mode: sh -*-
#
# Copyright (C) 2000--2014 Richard Mortier <mort@cantab.net>.  All Rights
# Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
# USA.

#
# handy shell functions
#

[ -r ~/rc-files/envfns.sh  ] && source ~/rc-files/envfns.sh
[ -r ~/rc-files/filefns.sh ] && source ~/rc-files/filefns.sh
[ -r ~/rc-files/hosts.sh   ] && source ~/rc-files/hosts.sh

[ -r ~/src/sh-scripts/numfns.sh ] && source ~/src/sh-scripts/numfns.sh

#
# general
#

umask 0002

shopt -s checkwinsize
shopt -s extglob

PLATFORM=$(uname -s)
LHOST=$(uname -n)
SHOST=${LHOST%%.*}
KERNEL=$(uname -r)
CDPATH=.:..:../..:../../..:../../../..:../../../../..:../../../../../..:../../../../../../..:../../../../../../../..:../../../../../../../../..:../../../../../../../../../..:$HOME
EDITOR="emacsclient -s /tmp/emacs-$USER/server"
PAGER="less -FRXi"
MANPAGER="less -FRXi"
export LHOST SHOST KERNEL CDPATH EDITOR PAGER MANPAGER

#
# paths
#

unset PATH
aenv PATH /sbin
aenv PATH /bin
aenv PATH /usr/sbin
aenv PATH /usr/bin
aenv PATH /usr/local/sbin
aenv PATH /usr/local/bin
aenv PATH /usr/X11R6/bin
aenv PATH /usr/local/share/npm/bin
aenv PATH ~/me/local/bin

unset MANPATH
aenv MANPATH /usr/local/share/man
aenv MANPATH /usr/share/man
aenv MANPATH /usr/X11R6/man
aenv MANPATH ~/me/local/man

aenv NODE_PATH /usr/local/lib/node

export SLIMERJSLAUNCHER=~/Applications/Firefox.app/Contents/MacOS/firefox

## stupid proxy settings; default off!
# export http_proxy="http://proxy.nottingham.ac.uk:8080"
# export http_proxy="http://wwwcache.cs.nott.ac.uk:3128"
export no_proxy="localhost,127.0.0.1"

case $PLATFORM in
    Linux )
        MAKE=make

        for d in /etc/bash_completion /etc/bash_completion.d ;
        do
            ## GIT bash completion
            [ -d $d ] && (
                ( [ -r $d/git ] && source $d/git )
                ( [ -r $d/git-prompt ] && source $d/git-prompt )
            )
        done

        ## debian has too old git completion
        [ -r ~/.git-prompt.sh ] && source ~/.git-prompt.sh
        ;;

    Darwin )
        aenv PATH $HOME/.rvm/bin
        aenv PATH /usr/local/texlive/2015/bin/x86_64-darwin

        MAKE=gnumake

        ## ec2 ami tools
        # export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Home"
        # export EC2_PRIVATE_KEY="$(/bin/ls $HOME/.ec2/pk-*.pem)"
        # export EC2_CERT="$(/bin/ls $HOME/.ec2/cert-*.pem)"
        # export EC2_AMITOOL_HOME="/usr/local/Cellar/ec2-ami-tools/1.3-45758/jars"

        ## ec2 api tools
        # export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Home"
        # export EC2_PRIVATE_KEY="$(/bin/ls $HOME/.ec2/pk-*.pem)"
        # export EC2_CERT="$(/bin/ls $HOME/.ec2/cert-*.pem)"
        # export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.3-62308/jars"

        ## homebrew completion
        # source $(brew --prefix)/Library/Contributions/brew_bash_completion.sh
        source /usr/local/Library/Contributions/brew_bash_completion.sh

        ## GIT bash completion
        gitdir=$(dirname $(abspath $(which git)))
        source ${gitdir}/../etc/bash_completion.d/git-completion.bash
        source ${gitdir}/../etc/bash_completion.d/git-prompt.sh

        ## Android
        export ANDROID_HOME=/usr/local/opt/android-sdk
        ;;
esac

case ${LHOST#*.} in
    cl.cam.ac.uk )
        aenv PATH /usr/kerberos/bin
esac

#
# bash settings
#

# history

command_oriented_history=TRUE # multi-line commands become single line
notify=TRUE # support notifications

shopt -s histappend # continue appending, don't delete periodically
export PROMPT_COMMAND="history -a" # add every command to history
export HISTIGNORE="&:l[sl][a]:[bf]g:exit:[ \t]"
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=10000
export HISTFILESIZE=10000

# prompt

# so bash doesn't do variable expansion on (eg.) \w in PS1 -- consider
# the case of a dir. called "`rm -rf ~`" ... :-> (ask Austin)
export NO_PROMPT_VARS
set -o noclobber # require explicit overwrite when redirecting

source ~/rc-files/colours.sh
GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWSTASHSTATE=
GIT_PS1_SHOWUNTRACKEDFILES=
GIT_PS1_SHOWCOLORHINTS=true
GIT_PS1_SHOWUPSTREAM="auto"

case $TERM in
    dumb )
        PROMPT_COMMAND='__git_ps1 \
          ": \u@\h:\[$WHITE\]\W\[$COLOR_OFF\]" \
          "\[$COLOR_OFF\]\$; " \
          "#%s "
          '
        ;;

    * )
        PROMPT_COMMAND='__git_ps1 \
          "\[\e]0;${KERNEL} \u@\h:\w\a\]: \u@\h:\[$WHITE\]\W\[$COLOR_OFF\]" \
          "\[$COLOR_OFF\]\$; " \
          "#%s "
          '
        ;;
esac

export PROMPT_COMMAND

## cabal, haskell package management (for pandoc)
aenv MANPATH ~/.cabal/share/man
aenv PATH ~/.cabal/bin

# pip bash completion start
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                             COMP_CWORD=$COMP_CWORD \
                             PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if complete &>/dev/null; then
    _npm_completion () {
        local si="$IFS"
        IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                                         COMP_LINE="$COMP_LINE" \
                                         COMP_POINT="$COMP_POINT" \
                                         npm completion -- "${COMP_WORDS[@]}" \
                                         2>/dev/null)) || return $?
        IFS="$si"
    }
    complete -F _npm_completion npm
elif compctl &>/dev/null; then
    _npm_completion () {
        local cword line point words si
        read -Ac words
        read -cn cword
        let cword-=1
        read -l line
        read -ln point
        si="$IFS"
        IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                                     COMP_LINE="$line" \
                                     COMP_POINT="$point" \
                                     npm completion -- "${words[@]}" \
                                     2>/dev/null)) || return $?
        IFS="$si"
    }
    compctl -K _npm_completion npm
fi
###-end-npm-completion-###

## asciidoc -- required to rung things via XML stage
export XML_CATALOG_FILES=/usr/local/etc/xml/catalog

## OPAM configuration
[ -f ~/.opam/opam-init/init.sh ] && \
    source ~/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true
export OCAMLRUNPARAM=b

## added by travis gem
## remove as only for `travis` CLI completion
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh
