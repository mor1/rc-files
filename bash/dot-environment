# -*- mode: sh -*-
#
# Copyright (C) 2000--2023 Richard Mortier <mort@cantab.net>. All Rights
# Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the Free
# Software Foundation
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place - Suite 330, Boston, MA 02111-1307, USA.

[ -r ~/rc-files/scripts/envfns.sh ] && source ~/rc-files/scripts/envfns.sh

#
# paths
#

unset PATH
aenv PATH /bin
aenv PATH /usr/bin

if [ -r /etc/NIXOS ]; then
  aenv PATH /run/current-system/sw/bin
  aenv PATH /run/wrappers/bin
fi

if [ -d ~/.nix-profile ]; then
  aenv PATH /nix/var/nix/profiles/default/bin
  aenv PATH /etc/profiles/per-user/$USER/bin
  aenv PATH /home/$USER/.nix-profile/bin
else
  aenv PATH /sbin
  aenv PATH /usr/sbin
  aenv PATH /usr/X11R6/bin
  aenv PATH /usr/local/sbin
  aenv PATH /usr/local/bin
fi

unset MANPATH
aenv MANPATH /usr/local/share/man
aenv MANPATH /usr/share/man
aenv MANPATH /usr/X11R6/man

aenv PATH    ~/.local/bin
aenv MANPATH ~/.local/man

#
# bash settings
#

umask 0002
shopt -s checkwinsize
shopt -s extglob

[ -r ~/.bash_aliases ] && source ~/.bash_aliases

#
# bash history
#

command_oriented_history=TRUE # multi-line commands become single line
notify=TRUE # support notifications

export HISTIGNORE="&:l?([sl])?(a):[bf]g:exit:[ \t]:history"
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTCONTROL=ignoreboth

## https://unix.stackexchange.com/questions/1288/preserve-bash-history-in-multiple-terminal-windows/48116#48116
_bash_history_sync () {
  builtin history -a          # append last command to HISTFILE
  HISTFILESIZE=$HISTSIZE      # truncate HISTFILE to HISTSIZE
  builtin history -c          # clear the current session
  builtin history -r          # read the history
}
history () {                    # ensure history synced before display
  _bash_history_sync
  builtin history "$@"
}
PROMPT_COMMAND=_bash_history_sync

#
# bash prompt
#

# so bash doesn't do variable expansion on (eg.) \w in PS1 -- consider the case
# of a dir. called "`rm -rf ~`" ... :-> (ask Austin)
export NO_PROMPT_VARS
set -o noclobber # require explicit overwrite when redirecting

ps1git() {
  source ~/rc-files/scripts/colours.sh
  GIT_PS1_SHOWDIRTYSTATE=false
  GIT_PS1_SHOWSTASHSTATE=false
  GIT_PS1_SHOWUNTRACKEDFILES=false
  GIT_PS1_SHOWCOLORHINTS=true
  GIT_PS1_SHOWUPSTREAM="auto"
  case $TERM in
    dumb )
      PROMPT_COMMAND='__git_ps1 \
          ": \u@\h:\[$WHITE\]\W\[$COLOR_OFF\]" \
          "\[$COLOR_OFF\]\\$; " \
          "#%s "
          '
      ;;

    * )
      PROMPT_COMMAND='__git_ps1 \
          "\[\e]0;\u@\h:\w\a\]: \u@\h:\[$WHITE\]\W\[$COLOR_OFF\]" \
          "\[$COLOR_OFF\]\\$; " \
          "#%s "
          '
      ;;
  esac
}

ps1nogit() {
  source ~/rc-files/scripts/colours.sh
  PROMPT_COMMAND=_bash_history_sync
  PS1="\[\e]0;\u@\h:\w\a\]: \u@\h:\[$WHITE\]\W\[$COLOR_OFF\]\\$; "
  export PS1
}

#
# environment
#

CDPATH=.:..:../..:../../..:../../../..:../../../../..:../../../../../..:../../../../../../..:../../../../../../../..:../../../../../../../../..:../../../../../../../../../..:$HOME
KERNEL=$(uname -r)
LHOST=$(uname -n)
PLATFORM=$(uname -s)
SHOST=${LHOST%%.*}
export CDPATH KERNEL LHOST PLATFORM SHOST

[[ $(which foot) ]] || export TERM=xterm
[[ $(which bat) ]] && export MANPAGER="sh -c 'col -bx | bat -l man -p'"
PAGER="less -FRXi"
BAT_PAGER=$PAGER
MANROFFOPT="-c"
export PAGER BAT_PAGER MANROFFOPT

LC_ALL="en_GB.UTF-8"
LANG="en_GB.UTF-8"
LANGUAGE="en_GB.UTF-8"
export LC_ALL LANG LANGUAGE

LESSCHARSET=utf-8
export LESSCHARSET

GPG_TTY=$(tty)
export GPG_TTY

#
# platform specific configuration
#

case $PLATFORM in

  Linux )
    if [ -r ~/.git-prompt.sh ]; then
      source ~/.git-prompt.sh
    elif [ -r /etc/NIXOS ]; then
      gitdir=$(dirname $(readlink -f $(which git)))
      source ${gitdir}/../share/git/contrib/completion/git-prompt.sh
    else
      for d in /etc/bash_completion /etc/bash_completion.d ; do
        ## GIT bash completion
        if [ -d $d ]; then
          [ -r $d/git ] && source $d/git
          [ -r $d/git-prompt ] && source $d/git-prompt
        fi
      done
    fi

    ps1git
    ;;

  Darwin )
    unset PYTHONPATH
    aenv PYTHONPATH /usr/local/Cellar/pdm/1.13.4/libexec/lib/python3.10/site-packages/pdm/pep582
    enva PATH "/usr/local/opt/python@3.7/bin"
    aenv LDFLAGS "-L/usr/local/opt/python@3.7/lib"
    aenv PKG_CONFIG_PATH "/usr/local/opt/python@3.7/lib/pkgconfig"

    aenv PATH /usr/local/texlive/2022/bin/universal-darwin
    export EDITOR="emacsclient -s /tmp/emacs-$USER/server"

    ## GIT bash completion
    gitdir=$(dirname $(abspath $(which git)))
    source ${gitdir}/../etc/bash_completion.d/git-completion.bash
    source ${gitdir}/../etc/bash_completion.d/git-prompt.sh

    ## Android
    export ANDROID_HOME=/usr/local/opt/android-sdk

    ps1nogit
    ;;
esac

#
# host specific configuration
#

case ${LHOST#*.} in

  cl.cam.ac.uk )
    aenv PATH /usr/kerberos/bin
    ;;

esac

## my shell functions
[ -r ~/rc-files/scripts/filefns.sh ] && source ~/rc-files/scripts/filefns.sh
[ -r ~/rc-files/scripts/hosts.sh ] && source ~/rc-files/scripts/hosts.sh
[ -r ~/src/dockerfiles/dockerfns.sh ] && source ~/src/dockerfiles/dockerfns.sh
[ -r ~/src/sh-scripts/numfns.sh ] && source ~/src/sh-scripts/numfns.sh

## OCaml
if [ -x "$(which opam)" ]; then
  [[ -r ~/.opam/opam-init/init.sh ]] && . ~/.opam/opam-init/init.sh
  export OCAMLRUNPARAM=b
fi

## Rust
[[ -r "$HOME/.cargo/env" ]] && . "$HOME/.cargo/env"

## load completions
[[ $(which direnv)   ]] && { source <(direnv hook bash) ; direnv reload ;}
[[ $(which procs)    ]] && source <(procs --gen-completion-out bash)
[[ $(which just)     ]] && source <(just --completions bash)
[[ $(which maestral) ]] && source <(maestral completion bash)
[[ $(which zola)     ]] && source <(zola completion bash)
